---
import ThemeToggle from './ThemeToggle.astro';

const navigation = [
  { name: "Home", href: "/" },
  { name: "Projects", href: "/projects" },
  { name: "Open Source", href: "/opensource" },
  { name: "Dev Tools", href: "/devtools" },
  { name: "מדריכים", href: "/tutorials" },
  { name: "בלוג", href: "/blog" },
];

const currentPath = Astro.url.pathname;

// Function to check if current path matches navigation item
function isActiveNavItem(itemHref: string, currentPath: string): boolean {
  if (itemHref === '/') {
    return currentPath === '/';
  }
  return currentPath.startsWith(itemHref);
}
---

<nav class="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60" dir="ltr">
  <div class="container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a 
          href="/" 
          class="text-xl font-bold hero-gradient-text hover:scale-105 transition-transform duration-200"
        >
          Portfolio
        </a>
      </div>

      <!-- Desktop Navigation - Centered -->
      <div class="hidden md:flex flex-1 justify-center">
        <div class="flex items-baseline space-x-4 rtl:space-x-reverse">
          {navigation.map((item) => (
            <a
              href={item.href}
              class={`px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${
                isActiveNavItem(item.href, currentPath)
                  ? "bg-primary text-primary-foreground shadow-md"
                  : "text-foreground hover:bg-muted hover:text-foreground"
              }`}
            >
              {item.name}
            </a>
          ))}
        </div>
      </div>

      <!-- Theme Toggle and Mobile menu -->
      <div class="flex items-center space-x-2">
        <!-- Theme Toggle -->
        <ThemeToggle />

        <!-- Search Button - Commented out for content-specific search -->
        <!-- <button
          id="search-toggle"
          class="w-9 h-9 p-0 rounded-md hover:bg-muted inline-flex items-center justify-center"
          title="Search"
        >
          <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </button> -->

        <!-- Mobile menu button -->
        <button
          id="mobile-menu-toggle"
          class="md:hidden w-9 h-9 p-0 rounded-md hover:bg-muted inline-flex items-center justify-center"
          title="Toggle menu"
        >
          <svg id="mobile-menu-open" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          <svg id="mobile-menu-close" class="hidden h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Search Bar - Commented out for content-specific search -->
    <!-- <div id="search-bar" class="hidden border-t py-3">
      <div class="relative max-w-md mx-auto">
        <input
          type="text"
          id="search-input"
          placeholder="Search across all pages..."
          class="w-full px-4 py-2 pl-10 pr-4 rounded-lg border bg-background focus:outline-none focus:ring-2 focus:ring-primary"
        />
        <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
      </div>
      <div id="search-results" class="mt-3 max-w-md mx-auto hidden">
        <div class="bg-background border rounded-lg shadow-lg max-h-60 overflow-y-auto">
          Search results will be populated here
        </div>
      </div>
    </div> -->

    <!-- Mobile Navigation Menu -->
    <div id="mobile-menu" class="hidden md:hidden">
      <div class="px-2 pt-2 pb-3 space-y-1 border-t">
        {navigation.map((item) => (
          <a
            href={item.href}
            class={`block px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 ${
              isActiveNavItem(item.href, currentPath)
                ? "bg-primary text-primary-foreground"
                : "text-foreground hover:bg-muted hover:text-foreground"
            }`}
          >
            {item.name}
          </a>
        ))}
      </div>
    </div>
  </div>
</nav>

<script>
  function toggleMobileMenu() {
    const menu = document.getElementById('mobile-menu');
    const openIcon = document.getElementById('mobile-menu-open');
    const closeIcon = document.getElementById('mobile-menu-close');
    
    menu?.classList.toggle('hidden');
    openIcon?.classList.toggle('hidden');
    closeIcon?.classList.toggle('hidden');
  }

  function toggleSearch() {
    const searchBar = document.getElementById('search-bar');
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    
    searchBar?.classList.toggle('hidden');
    if (!searchBar?.classList.contains('hidden')) {
      searchInput?.focus();
    }
  }

  // Search functionality
  interface SearchItem {
    title: string;
    url: string;
    content: string;
  }

  const searchData: SearchItem[] = [
    { title: "Home", url: "/", content: "Ariel Benesh passionate developer crafting digital experiences modern technologies web development open source" },
    { title: "Projects", url: "/projects", content: "portfolio projects web applications software development" },
    { title: "Open Source", url: "/opensource", content: "open source contributions github repositories community projects" },
    { title: "Dev Tools", url: "/devtools", content: "development tools utilities productivity software" },
    { title: "מדריכים", url: "/tutorials", content: "tutorials learning guides react typescript css security web development hebrew" },
    { title: "בלוג", url: "/blog", content: "blog posts articles thoughts experiences web development career technology trends hebrew" }
  ];

  function performSearch(query: string): SearchItem[] {
    if (!query.trim()) return [];
    
    const results = searchData.filter(item => 
      item.title.toLowerCase().includes(query.toLowerCase()) ||
      item.content.toLowerCase().includes(query.toLowerCase())
    );
    
    return results.slice(0, 5); // Limit to 5 results
  }

  function displaySearchResults(results: SearchItem[]) {
    const resultsContainer = document.getElementById('search-results');
    const resultsDiv = resultsContainer?.querySelector('div');
    
    if (!resultsDiv) return;
    
    if (results.length === 0) {
      resultsDiv.innerHTML = '<div class="p-3 text-muted-foreground text-sm">No results found</div>';
    } else {
      resultsDiv.innerHTML = results.map((result: SearchItem) => `
        <a href="${result.url}" class="block p-3 hover:bg-muted transition-colors border-b last:border-b-0">
          <div class="font-medium text-sm">${result.title}</div>
        </a>
      `).join('');
    }
    
    resultsContainer?.classList.remove('hidden');
  }

  // Event listeners
  document.getElementById('mobile-menu-toggle')?.addEventListener('click', toggleMobileMenu);
  
  // Search event listeners - Commented out for content-specific search
  // document.getElementById('search-toggle')?.addEventListener('click', toggleSearch);
  
  // document.getElementById('search-input')?.addEventListener('input', (e: Event) => {
  //   const target = e.target as HTMLInputElement;
  //   const query = target?.value || '';
  //   if (query.trim()) {
  //     const results = performSearch(query);
  //     displaySearchResults(results);
  //   } else {
  //     document.getElementById('search-results')?.classList.add('hidden');
  //   }
  // });

  // // Close search when clicking outside
  // document.addEventListener('click', (e: Event) => {
  //   const searchBar = document.getElementById('search-bar');
  //   const searchToggle = document.getElementById('search-toggle');
  //   const target = e.target as HTMLElement;
  //   
  //   if (!searchBar?.contains(target) && !searchToggle?.contains(target)) {
  //     searchBar?.classList.add('hidden');
  //     document.getElementById('search-results')?.classList.add('hidden');
  //   }
  // });
</script>
