---
import { siteConfig } from '../data/site-data';
import Footer from '../components/Footer.astro';
import '../styles/globals.css';
import { readFileSync } from 'fs';

interface Props {
  title?: string;
  description?: string;
  ogImage?: string;
}

const { 
  title = siteConfig.title, 
  description = siteConfig.description,
  ogImage = '/og-image.png' // A default OG image
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// Read package.json to get version
const packageJson = JSON.parse(readFileSync('./package.json', 'utf8'));
const appVersion = packageJson.version;
const commitHash = import.meta.env.VITE_COMMIT_HASH || '2b718a5fcaf298e5295ab7e0dbb85c9d8ac19b5e';
---

<!doctype html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <title>{title}</title>

    <!-- SEO / Open Graph -->
    <link rel="canonical" href={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={new URL(ogImage, Astro.url)} />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content={siteConfig.name} />

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={new URL(ogImage, Astro.url)} />

    <!-- Google Analytics -->
    <script async src={`https://www.googletagmanager.com/gtag/js?id=${siteConfig.googleTagId}`} is:inline></script>
    <script is:inline set:html={`
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', '${siteConfig.googleTagId}');
    `} />
  </head>
  <body>
    <slot />
    <Footer />
  </body>
</html>

<script define:vars={{ appVersion, commitHash }}>
  // Log deployment info
  console.log(`Deployed version: ${appVersion}, commit: ${commitHash}`);

  // Theme functionality
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };

  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
  }

  // RTL functionality
  const getRTLPreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('rtl')) {
      return localStorage.getItem('rtl') === 'true';
    }
    return false;
  };

  const isRTL = getRTLPreference();
  document.documentElement.dir = isRTL ? 'rtl' : 'ltr';
</script>
